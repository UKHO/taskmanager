# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: UKHO Windows 2019

workspace:
  clean: all

steps:

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
    feedsToUse: 'select'
  displayName: 'dotnet restore portal'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
  displayName: 'dotnet build portal'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
    feedsToUse: 'select'
  displayName: 'dotnet restore portaltests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
  displayName: 'dotnet build portaltests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
  displayName: 'dotnet test portaltests'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
    feedsToUse: 'select'
  displayName: 'dotnet restore portalspecs'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
  displayName: 'dotnet build portalspecs'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
    zipAfterPublish: false
    arguments: '--output $(Build.ArtifactStagingDirectory)\\portal'
  displayName: 'Publish portal-project'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
    zipAfterPublish: false
    arguments: '--output $(Build.ArtifactStagingDirectory)\\Specs'
  displayName: 'Publish specs-project'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\\portal'
    ArtifactName: 'portal'
    publishLocation: 'Container'
  displayName: 'Publish portal Artifact'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\\specs'
    ArtifactName: 'specs'
    publishLocation: 'Container'
  displayName: 'Publish specs Artifact'

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    buildType: 'current'
    downloadType: 'specific'
    downloadPath: '$(System.ArtifactsDirectory)' 

- task: AzureRmWebAppDeployment@4
  displayName: 'Azure App Service Deploy'
  inputs:
    azureSubscription: 'TM2-Dev'
    WebAppName: 'taskmanager-dev-web-portal'
    packageForLinux: '$(System.ArtifactsDirectory)/Portal/portal'

- task: AzureCLI@1
  inputs:
    azureSubscription: 'TM2-Dev'
    scriptLocation: 'inlineScript'
    inlineScript: 'call dotnet vstest $(System.ArtifactsDirectory)\specs\Portal.TestAutomation.Specs\Portal.TestAutomation.Specs.dll --logger:trx'
  displayName: 'Run SpecFlow tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/*.trx'
    testResultsFormat: 'VSTest'
