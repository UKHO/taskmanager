trigger:
  branches:
    include:
    - master
    - features/*
  paths:
    include:
    - src/Portal/*
    - src/Databases/WorkflowDatabase.EF/*
    - src/Common*
    - src/HpdDatabase.EF/*  

stages:
- stage: Build
  jobs:
    - job: RestoreBuildAndDeploy
      pool: "UKHO Windows 2019"
      
      workspace:
          clean: all

      steps:

      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet
          
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          feedsToUse: 'select'
        displayName: 'dotnet restore portal'
    
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
        displayName: 'dotnet build portal'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
          feedsToUse: 'select'
        displayName: 'dotnet restore portaltests'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
        displayName: 'dotnet build portaltests'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
          arguments: -c $(BuildConfiguration) --collect:"XPlat Code Coverage" -s $(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\CodeCoverage.runsettings
        displayName: 'dotnet test portaltests'

      - task: DotNetCoreCLI@2
        inputs:
          command: custom
          custom: tool
          arguments: install --tool-path . dotnet-reportgenerator-globaltool
        displayName: Install ReportGenerator tool

      - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
        displayName: Create reports
  
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)\coverlet\reports\Cobertura.xml

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
          feedsToUse: 'select'
        displayName: 'dotnet restore portalspecs'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
        displayName: 'dotnet build portalspecs'
  
      # - task: CmdLine@2
      #   inputs:
      #     script: 'choco install pickles'
      #   displayName: Install Pickles
  
      # - task: CmdLine@2
      #   inputs:
      #     script: 'pickles --feature-directory=$(System.DefaultWorkingDirectory)\\src\\Portal.TestAutomation.Specs --output-directory=$(System.DefaultWorkingDirectory)\\src\\Pickles.GeneratedDocumentation --system-under-test-name="Task Manager - Portal" --documentation-format=dhtml'
      #   displayName: Generate Pickles Documentation
  
      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     PathtoPublish: '$(System.DefaultWorkingDirectory)\src\Pickles.GeneratedDocumentation'
      #     ArtifactName: 'drop'
      #     publishLocation: 'Container'
      #   displayName: Publish Pickles Artifact
  
      # - task: AzureFileCopy@3
      #   inputs:
      #     SourcePath: '$(System.DefaultWorkingDirectory)\src\Pickles.GeneratedDocumentation'
      #     azureSubscription: 'TestEngineering-Live'
      #     Destination: 'AzureBlob'
      #     storage: '$(AzureStorageAccount)'
      #     ContainerName: '$web/$(Build.Repository.Name)'
      #   displayName: Publish Pickles Artifact to Azure Blob Storage
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          zipAfterPublish: false
          arguments: '--output $(Build.ArtifactStagingDirectory)\\portal'
        displayName: 'Publish portal-project'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
          zipAfterPublish: false
          arguments: '--output $(Build.ArtifactStagingDirectory)\\Specs'
        displayName: 'Publish specs-project'
  
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\\portal'
          ArtifactName: 'portal'
          publishLocation: 'Container'
        displayName: 'Publish portal Artifact'
  
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\\specs'
          ArtifactName: 'specs'
          publishLocation: 'Container'
        displayName: 'Publish specs Artifact'

- stage: DeployDev
  jobs:    
    - deployment: DeployPortalWebsite
      displayName: deploy Web App
      pool: "UKHO Ubuntu 1804"
        # creates an environment if it doesn't exist
      environment: 'tm2dev'
      strategy:
        # default deployment strategy, more coming...
        runOnce:
          deploy:
            steps:
              - task: DownloadBuildArtifacts@0
                displayName: 'Download Build Artifacts'
                inputs:
                  buildType: 'current'
                  downloadType: 'specific'
                  downloadPath: '$(System.ArtifactsDirectory)' 
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TM2-Dev'
                  WebAppName: 'taskmanager-dev-web-portal'
                  packageForLinux: '$(System.ArtifactsDirectory)/portal/portal'

    - job: RunAutomatedTests
      dependsOn: DeployPortalWebsite
      pool:
          NautilusBuild
      steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              Install-Module -Name "UKHO.ChromeDriver.BinarySync"  -Repository "ukho.psgallery"
              Update-ChromeDriver -ChromeDriverDownloads \\mgmt.local\dfs\DML-SW-Engineering\Chrome\ChromeDriver -IncludeBeta

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifacts'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            downloadPath: '$(System.ArtifactsDirectory)' 

        - task: AzureCLI@1
          inputs:
            azureSubscription: 'TM2-Dev'
            scriptLocation: 'inlineScript'
            inlineScript: 'call dotnet vstest $(System.ArtifactsDirectory)\specs\Portal.TestAutomation.Specs\Portal.TestAutomation.Specs.dll --logger:trx'
          displayName: 'Run SpecFlow tests'

        - task: PublishTestResults@2
          inputs:
            testResultsFiles: '**/*.trx'
            testResultsFormat: 'VSTest'
