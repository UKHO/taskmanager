trigger:
  branches:
    include:
    - features/*
  paths:
    include:
    - src/Portal*
    - src/Databases/WorkflowDatabase.EF/*
    - src/Common*
    - src/HpdDatabase.EF/*  

pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/Portal*
    - src/Databases/WorkflowDatabase.EF/*
    - src/Common*
    - src/HpdDatabase.EF/*
variables:
  MSBUILDSINGLELOADCONTEXT: '1'
  # This is a workaround for an issue building SpecFlow projects using the .NET Core SDK 3.1.200 https://github.com/SpecFlowOSS/SpecFlow/issues/1912

stages:
- stage: Build
  jobs:
    - job: RestoreBuildAndDeploy
      pool: "UKHO Windows 2019"
      
      workspace:
          clean: all

      steps:

      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet
          
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          feedsToUse: 'select'
          vstsFeed: '723dbddb-f125-4104-aa0e-de467e74d75b/3479b688-97eb-49d4-9251-08ddaa328155'
          includeNuGetOrg: true
          arguments: '--configuration $(BuildConfiguration)'
        displayName: 'dotnet restore portal'
    
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          arguments: '/p:SourceRevisionId=$(Build.SourceVersion) --configuration $(BuildConfiguration) --no-restore'
        displayName: 'dotnet build portal'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          arguments: '--configuration $(BuildConfiguration)'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
        displayName: 'dotnet build portaltests'

      # Write build number and Id to text file
      - script: '(echo $(Build.BuildNumber) && echo $(Build.BuildId)) > .buildinfo.json'
        displayName: "Emit build number"
        workingDirectory: '$(Build.SourcesDirectory)\\src\\portal\\portal'
        failOnStderr: true
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\portal.unittests.csproj'
          arguments: --collect:"XPlat Code Coverage" -s $(Build.SourcesDirectory)\\src\\portal\\portal.unittests\\CodeCoverage.runsettings --configuration $(BuildConfiguration) --no-build
        displayName: 'dotnet test portaltests'

      - task: DotNetCoreCLI@2
        inputs:
          command: custom
          custom: tool
          arguments: install --tool-path . dotnet-reportgenerator-globaltool
        displayName: Install ReportGenerator tool

      - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
        displayName: Create reports
  
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)\coverlet\reports\Cobertura.xml

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          zipAfterPublish: false
          arguments: '/p:SourceRevisionId=$(Build.SourceVersion) --output $(Build.ArtifactStagingDirectory)\\portal --configuration $(BuildConfiguration)'
        displayName: 'Publish portal-project'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\\portal'
          ArtifactName: 'portal'
          publishLocation: 'Container'
        displayName: 'Publish portal Artifact'


    - job: BuildSpecs
      pool: "UKHO Windows 2019"
      
      workspace:
          clean: all

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
          feedsToUse: 'select'
        displayName: 'dotnet restore portalspecs'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
        displayName: 'dotnet build portalspecs'
    
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\Portal.TestAutomation.Specs\\Portal.TestAutomation.Specs.csproj'
          zipAfterPublish: false
          arguments: '--output $(Build.ArtifactStagingDirectory)\\Specs'
        displayName: 'Publish specs-project'
  
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\\specs'
          ArtifactName: 'specs'
          publishLocation: 'Container'
        displayName: 'Publish specs Artifact'

    - job: BuildAccessibilityTests
      pool: "UKHO Windows 2019"
      
      workspace:
          clean: all

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore AccessibilityTests'
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.AccessibilityTests\\Portal.AccessibilityTests.csproj'
          feedsToUse: 'select'
  
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build AccessibilityTests'
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\Portal.AccessibilityTests\\Portal.AccessibilityTests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Publish AccessibilityTests'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\Portal.AccessibilityTests\\Portal.AccessibilityTests.csproj'
          zipAfterPublish: false
          arguments: '--output $(Build.ArtifactStagingDirectory)\\AccessibilityTests'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish AccessibilityTests Artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\\AccessibilityTests'
          ArtifactName: 'AccessibilityTests'
          publishLocation: 'Container'


    - job: Publish_Pickles
      pool:
          NautilusBuild

      workspace:
          clean: all

      steps:
      - task: CmdLine@2
        displayName: Install Pickles
        inputs:
          script: 'choco install pickles'
  
      - task: CmdLine@2
        displayName: Generate Pickles Documentation
        inputs:
          script: 'pickles --feature-directory=$(System.DefaultWorkingDirectory)\src\Portal.TestAutomation.Specs --output-directory=$(System.DefaultWorkingDirectory)\src\Pickles.GeneratedDocumentation --system-under-test-name="Task Manager - Portal" --documentation-format=dhtml'
  
      - task: PublishBuildArtifacts@1
        displayName: Publish Pickles Artifact
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)\src\Pickles.GeneratedDocumentation'
          ArtifactName: 'drop'
          publishLocation: 'Container'
  
      - task: AzureFileCopy@3
        displayName: Publish Pickles Artifact to Azure Blob Storage
        inputs:
          SourcePath: '$(System.DefaultWorkingDirectory)\src\Pickles.GeneratedDocumentation'
          azureSubscription: 'TestEngineering-Live'
          Destination: 'AzureBlob'
          storage: '$(PicklesAzureStorageAccount)'
          ContainerName: '$web/$(Build.Repository.Name)'

    - job: DependencyCheck
      pool: NautilusBuild

      workspace:
        clean: all

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core 2.1.x SDK'
        inputs:
          packageType: sdk
          version: 2.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1.x SDK'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\portal\\portal\\portal.csproj'
          feedsToUse: 'select'
          vstsFeed: '723dbddb-f125-4104-aa0e-de467e74d75b/3479b688-97eb-49d4-9251-08ddaa328155'
          includeNuGetOrg: true
        displayName: 'dotnet restore portal'
        
      - task: DotNetCoreCLI@2
        inputs:
          command: publish
          arguments: "--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/publish_output --no-restore"
          projects: "**/portal.csproj"
          publishWebProjects: false
          modifyOutputPath: false
          zipAfterPublish: false

      - task: CmdLine@2
        inputs:
          script: 'dependency-check --project "portal - $(Build.SourceBranchName)" --scan "$(System.DefaultWorkingDirectory)/publish_output" --out "$(Build.SourcesDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml"'
        displayName: "Run NVD Checker"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.SourcesDirectory)\DCReport'
          artifact: "NVD report"
          publishLocation: "pipeline"

      - task: PowerShell@2
        displayName: "Fail build if dependency checker has vulnerabilities"
        inputs:
          targetType: inline
          script: Invoke-VulnerabilityCheck -ReportLocation $(Build.SourcesDirectory)\DCReport\*

- stage: DeployDev
  dependsOn: 
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:    
    - deployment: DeployPortalWebsiteDev
      displayName: Deploy portal website
      pool: "UKHO Ubuntu 1804"
      environment: 'TaskmanagerDev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerDev'
                  WebAppName: 'taskmanager-dev-web-portal'
                  packageForLinux: '$(Pipeline.Workspace)/portal/portal'



- stage: DeployUAT
  dependsOn: 
    - Build
  jobs:    
    # - deployment: DeployPortalWebsiteUAT
    #   displayName: Deploy portal website
    #   pool: "UKHO Ubuntu 1804"
    #   environment: 'TaskmanagerUAT_UI'
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #           - task: AzureRmWebAppDeployment@4
    #             displayName: 'Azure App Service Deploy'
    #             inputs:
    #               azureSubscription: 'TaskmanagerUAT-SC'
    #               WebAppName: 'taskmanager-uat-web-portal'
    #               packageForLinux: '$(Pipeline.Workspace)/portal/portal'

    # - job: RunAutomatedAccessibilityTests
    #   displayName: 'Run automated accessibility tests'
    #   dependsOn: DeployPortalWebsiteUAT
    #   pool:
    #       NautilusBuild
    #   steps:
    #     - checkout: none
    #     - task: PowerShell@2
    #       displayName: 'Update ChromeDriver'
    #       inputs:
    #         targetType: 'inline'
    #         script: |
    #           Install-Module -Name "UKHO.ChromeDriver.BinarySync"  -Repository "ukho.psgallery"
    #           Update-ChromeDriver -ChromeDriverDownloads \\mgmt.local\dfs\DML-SW-Engineering\Chrome\ChromeDriver -IncludeBeta

    #     - task: DownloadBuildArtifacts@0
    #       displayName: 'Download Build Artifacts'
    #       inputs:
    #         buildType: 'current'
    #         downloadType: 'specific'
    #         downloadPath: '$(System.ArtifactsDirectory)' 

    #     - task: UseDotNet@2
    #       displayName: 'Get latest dotnet runtime'
    #       inputs:
    #         packageType: 'runtime'
    #         version: '3.x'

    #     - task: AzureCLI@1
    #       displayName: 'Run Accessibility tests'
    #       continueOnError: true
    #       inputs:
    #         azureSubscription: 'TaskmanagerUAT-SC'
    #         scriptLocation: 'inlineScript'
    #         inlineScript: 'call dotnet vstest $(System.ArtifactsDirectory)\AccessibilityTests\Portal.AccessibilityTests\Portal.AccessibilityTests.dll --logger:trx'

    #     - task: PublishTestResults@2
    #       displayName: 'Publish Accessibility Test Results'
    #       condition: succeededOrFailed()
    #       inputs:
    #         testResultsFormat: 'VSTest'
    #         testResultsFiles: '**/*.trx'
    #         testRunTitle: 'Portal accessibility tests - $(System.StageName)'

    - job: RunAutomatedUITests
      displayName: 'Run automated UI tests'
      # dependsOn: DeployPortalWebsiteUAT
      pool:
          NautilusBuild
      steps:
        - checkout: none
        - task: PowerShell@2
          displayName: 'Update ChromeDriver'
          inputs:
            targetType: 'inline'
            script: |
              Install-Module -Name "UKHO.ChromeDriver.BinarySync"  -Repository "ukho.psgallery"
              Update-ChromeDriver -ChromeDriverDownloads \\mgmt.local\dfs\DML-SW-Engineering\Chrome\ChromeDriver -IncludeBeta

        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifacts'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            downloadPath: '$(System.ArtifactsDirectory)' 

        - task: UseDotNet@2
          displayName: 'Get latest dotnet runtime'
          inputs:
            packageType: 'runtime'
            version: '3.x'

        - task: AzureCLI@1
          inputs:
            azureSubscription: 'TaskmanagerUAT-SC'
            scriptLocation: 'inlineScript'
            inlineScript: 'call dotnet vstest $(System.ArtifactsDirectory)\specs\Portal.TestAutomation.Specs\Portal.TestAutomation.Specs.dll --logger:trx'
          displayName: 'Run SpecFlow tests'

        - task: PublishTestResults@2
          displayName: 'Publish SpecFlowTestResults'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '**/*.trx'
            testRunTitle: 'Portal UI tests - $(System.StageName)'


- stage: DeployPre
  dependsOn: 
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:    
    - deployment: DeployPortalWebsitePre
      displayName: Deploy portal website
      pool: "UKHO Ubuntu 1804"
      environment: 'TaskmanagerPre'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerPre-SC'
                  WebAppName: 'taskmanager-pre-web-portal'
                  packageForLinux: '$(Pipeline.Workspace)/portal/portal'

- stage: DeployPrd
  dependsOn: 
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:    
    - deployment: DeployPortalWebsitePrd
      displayName: Deploy portal website to Prd
      pool: "UKHO Ubuntu 1804"
      environment: 'TaskmanagerPrd'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerPrd-SC'
                  WebAppName: 'taskmanager-prd-web-portal'
                  packageForLinux: '$(Pipeline.Workspace)/portal/portal'
