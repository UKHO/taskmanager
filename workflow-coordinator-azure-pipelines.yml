trigger:
  branches:
    include:
    - features/*
  paths:
    include:
    - src/WorkflowCoordinator/*
    - src/Databases/WorkflowDatabase.EF/*
    - src/Common*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/WorkflowCoordinator/*
    - src/Databases/WorkflowDatabase.EF/*
    - src/Common*

stages:
- stage: Build
  jobs:
    - job: RestoreBuildAndDeploy
      pool: "UKHO Windows 2019"

      workspace:
          clean: all

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1.x SDK'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator\\workflowcoordinator.csproj'
          feedsToUse: 'select'
          vstsFeed: '723dbddb-f125-4104-aa0e-de467e74d75b/3479b688-97eb-49d4-9251-08ddaa328155'
          includeNuGetOrg: true
        displayName: 'dotnet restore workflowcoordinator'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator\\workflowcoordinator.csproj'
          arguments: "--configuration $(BuildConfiguration) --no-restore"
        displayName: 'dotnet build workflowcoordinator'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator.unittests\\workflowcoordinator.unittests.csproj'
          feedsToUse: 'select'
          vstsFeed: '723dbddb-f125-4104-aa0e-de467e74d75b/3479b688-97eb-49d4-9251-08ddaa328155'
          includeNuGetOrg: true
        displayName: 'dotnet restore workflowcoordinatortests'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator.unittests\\workflowcoordinator.unittests.csproj'
          arguments: "--configuration Debug --no-restore"
        displayName: 'dotnet build workflowcoordinatortests'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator.unittests\\workflowcoordinator.unittests.csproj'
          arguments: '--collect:"XPlat Code Coverage" -s $(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator.unittests\\CodeCoverage.runsettings --no-build'
        displayName: 'dotnet test workflowcoordinatortests'

      - task: DotNetCoreCLI@2
        inputs:
          command: custom
          custom: tool
          arguments: install --tool-path . dotnet-reportgenerator-globaltool
        displayName: Install ReportGenerator tool

      - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
        displayName: Create reports
        
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)\coverlet\reports\Cobertura.xml

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.SourcesDirectory)\\src\\workflowcoordinator\\workflowcoordinator\\workflowcoordinator.csproj'
          zipAfterPublish: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\\WebJob\\App_Data\\jobs\\continuous --no-build'
        displayName: 'Publish Solution'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: '"dotnet workflowcoordinator.dll" | Out-File run.cmd -Encoding ASCII; $LASTEXITCODE'
          workingDirectory: '$(Build.ArtifactStagingDirectory)\\WebJob\\App_Data\\jobs\\continuous\\workflowcoordinator'
        displayName: 'Generate run.cmd'

      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'License.xml'
        name: 'nsblicense'
        displayName: 'Download NSB License from Secure Files'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'copy-item $(nsblicense.secureFilePath) .\\'
          workingDirectory: '$(Build.ArtifactStagingDirectory)\\WebJob\\App_Data\\jobs\\continuous\\workflowcoordinator'
        displayName: 'Copy NSB License'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'workflowcoordinator'
          publishLocation: 'Container'
        displayName: 'Publish workflowcoordinator Artifact'

    - job: DependencyCheck
      pool: NautilusBuild

      workspace:
        clean: all

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core 2.1.x SDK'
        inputs:
          packageType: sdk
          version: 2.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1.x SDK'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)\\dotnet

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '**/workflowcoordinator.csproj'
          feedsToUse: 'select'
          vstsFeed: '723dbddb-f125-4104-aa0e-de467e74d75b/3479b688-97eb-49d4-9251-08ddaa328155'
          includeNuGetOrg: true
        displayName: 'dotnet restore workflowcoordinator'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '**/workflowcoordinator.csproj'
          arguments: "--configuration $(BuildConfiguration) --no-restore"
        displayName: 'dotnet build workflowcoordinator'

      - task: DotNetCoreCLI@2
        inputs:
          command: publish
          arguments: "--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/publish_output --no-build"
          projects: "**/workflowcoordinator.csproj"
          publishWebProjects: false
          modifyOutputPath: false
          zipAfterPublish: false

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $maxAttempts = 2
            $outPath = "$(Build.SourcesDirectory)\DCReport"
            for ($i = 0; $i -lt $maxAttempts; $i++) {
                write-host "Attempt $i"
                dependency-check --project "WorkflowCoordinator - $(Build.SourceBranchName)" --scan "$(System.DefaultWorkingDirectory)/publish_output" --out "$outPath" --suppression "$(Build.SourcesDirectory)\NVDSuppressions.xml"
                if ((test-path $outPath) -and (get-childitem $outPath | Measure-Object | select-object -ExpandProperty Count) -gt 0) {
                    write-host "Attempt $i successful"
                    break
                }
                write-host "Attempt $i failed, so purge dependency-check database"
                dependency-check --purge
                start-sleep -seconds 5
            }
          pwsh: true
        displayName: "Run NVD Checker"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.SourcesDirectory)\DCReport'
          artifact: "NVD report"
          publishLocation: "pipeline"

      - task: PowerShell@2
        displayName: "Fail build if depdency checker has vulnerabilities"
        inputs:
          targetType: inline
          script: Invoke-VulnerabilityCheck -ReportLocation $(Build.SourcesDirectory)\DCReport\*

- stage: DeployDev
  dependsOn: 
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
    - deployment: DeployWorkflowCoordinatorDev
      displayName: Deploy Workflowcoordinator NSB Service
      pool: "UKHO Windows 2019"
      environment: 'TaskmanagerDev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerDev'
                  WebAppName: 'taskmanager-dev-nsb-workflowcoordinator'
                  packageForLinux: '$(Pipeline.Workspace)/workflowcoordinator/WebJob'

- stage: DeployUAT
  dependsOn: 
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
    - deployment: DeployWorkflowCoordinatorUAT
      displayName: Deploy Workflowcoordinator NSB Service
      pool: "UKHO Windows 2019"
      environment: 'TaskmanagerUAT'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerUAT-SC'
                  WebAppName: 'taskmanager-uat-nsb-workflowcoordinator'
                  packageForLinux: '$(Pipeline.Workspace)/workflowcoordinator/WebJob'

- stage: DeployPre
  dependsOn:
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
    - deployment: DeployWorkflowCoordinatorPre
      displayName: Deploy Workflowcoordinator NSB Service
      pool: "UKHO Windows 2019"
      environment: 'TaskmanagerPre'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerPre-SC'
                  WebAppName: 'taskmanager-pre-nsb-workflowcoordinator'
                  packageForLinux: '$(Pipeline.Workspace)/workflowcoordinator/WebJob'

- stage: DeployPrd
  dependsOn:
    - Build
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
    - deployment: DeployWorkflowCoordinatorPrd
      displayName: Deploy Workflowcoordinator NSB Service to Prd
      pool: "UKHO Windows 2019"
      environment: 'TaskmanagerPrd'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy'
                inputs:
                  azureSubscription: 'TaskmanagerPrd-SC'
                  WebAppName: 'taskmanager-prd-nsb-workflowcoordinator'
                  packageForLinux: '$(Pipeline.Workspace)/workflowcoordinator/WebJob'
